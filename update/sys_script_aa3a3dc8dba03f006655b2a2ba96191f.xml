<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_label/>
        <action_name/>
        <action_query>false</action_query>
        <action_run_at>server</action_run_at>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <application/>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_dehp_time_track_time_sheet</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_dehp_time_track_time_sheet">stateCHANGESTOProcessed^EQ<item endquery="false" field="state" goto="false" newquery="false" operator="CHANGESTO" or="false" value="Processed"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Metric: Update Category Monthly Costs</name>
        <onclick/>
        <order>100</order>
        <priority>100</priority>
        <read_access_action>false</read_access_action>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	try {
		var categories = [];
		var timeCards = new GlideRecord('x_dehp_time_track_time_card');
		timeCards.addQuery('time_sheet', current.sys_id);
		timeCards.query();
		while(timeCards.next()) {
			categories.push(timeCards.getValue('category'));
		}
		// Only run updates if we find time cards categories
		if(categories.length > 0) {
			var endOfWeek = new GlideDateTime(current.week_starts_on);
			endOfWeek.addDaysUTC(7);
			var monthsAgoStart = parseInt(TimeUtils.getMonthsAgo(current.week_starts_on));
			var monthsAgoEnd = parseInt(TimeUtils.getMonthsAgo(endOfWeek));
			Reporting.buildMonthlyCostData(monthsAgoStart, categories);
			// Run the report for the next month if appropriate.
			if(monthsAgoStart != monthsAgoEnd)
				Reporting.buildMonthlyCostData(monthsAgoEnd, categories);
		}
	}
	catch(e) {
		gs.error(e);
	}
	
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>_ejense</sys_created_by>
        <sys_created_on>2019-03-27 20:14:37</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_id>aa3a3dc8dba03f006655b2a2ba96191f</sys_id>
        <sys_mod_count>12</sys_mod_count>
        <sys_name>Metric: Update Category Monthly Costs</sys_name>
        <sys_overrides/>
        <sys_package display_value="Time Tracking" source="x_dehp_time_track">fd7546c9db82eb00aa0f71043996190b</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Time Tracking">fd7546c9db82eb00aa0f71043996190b</sys_scope>
        <sys_update_name>sys_script_aa3a3dc8dba03f006655b2a2ba96191f</sys_update_name>
        <sys_updated_by>_ejense</sys_updated_by>
        <sys_updated_on>2019-04-01 22:46:52</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
</record_update>
