<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_label/>
        <action_name/>
        <action_query>false</action_query>
        <action_run_at>server</action_run_at>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <application/>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_dehp_time_track_rate_cards</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_dehp_time_track_rate_cards">hourly_rateVALCHANGESjavascript:global.getCurrencyFilter('x_dehp_time_track_rate_cards','hourly_rate', 'USD;USD')^EQ<item endquery="false" field="hourly_rate" goto="false" newquery="false" operator="VALCHANGES" or="false" value="javascript:global.getCurrencyFilter('x_dehp_time_track_rate_cards','hourly_rate', 'USD;USD')"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Update Rates on Rate Change</name>
        <onclick/>
        <order>100</order>
        <priority>100</priority>
        <read_access_action>false</read_access_action>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	// Recalculate all costs on related rate cards.
	var rate = parseFloat(current.hourly_rate).toFixed(2);
	var dayCards = new GlideRecord('x_dehp_time_track_time_card_day');
	dayCards.addQuery('rate_card', current.sys_id);
	dayCards.query();
	
	while (dayCards.next()) {
		try {
			dayCards.cost = dayCards.hours * rate;
			dayCards.update();	
			var timecard = new TimeCard(dayCards.time_card);
			timecard.updateTotalCost();
			}
		catch(e) {
			gs.addErrorMessage(e);
		}
	}
	gs.addInfoMessage('Recalculated all rates for days based on this rate card.');
	

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>_ejense</sys_created_by>
        <sys_created_on>2018-11-27 02:49:32</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_id>a47c4c1ddb0e2f00482906e2ca961979</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Update Rates on Rate Change</sys_name>
        <sys_overrides/>
        <sys_package display_value="Time Tracking" source="x_dehp_time_track">fd7546c9db82eb00aa0f71043996190b</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Time Tracking">fd7546c9db82eb00aa0f71043996190b</sys_scope>
        <sys_update_name>sys_script_a47c4c1ddb0e2f00482906e2ca961979</sys_update_name>
        <sys_updated_by>_ejense</sys_updated_by>
        <sys_updated_on>2018-11-27 02:49:32</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
</record_update>
