<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_dehp_time_track.Account</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>Account</name>
        <script><![CDATA[var Account = Class.create();
Account.prototype = {
	initialize: function (gr) {
		// handle if GlideRecord or SysID was passed.
		gr = TimeUtils.verifyIsGlideRecord(gr, 'x_dehp_time_track_accounts');
		this.gr = gr;
		this.sysId = gr.sys_id;
	},
	
	_getAccountUsers: function () {
		var relatedUsers = new GlideRecord('x_dehp_time_track_m2m_accounts_users');
		var relatedGroups = new GlideRecord('x_dehp_time_track_m2m_accounts_groups');
		var foundUsers = [];
		var arrayUtil = new global.ArrayUtil();
		
		relatedUsers.addQuery('accounts', this.sysId);
		relatedUsers.addQuery('user.active', true);
		relatedUsers.query();
		while (relatedUsers.next())
			foundUsers.push(relatedUsers.getValue('user'));
		
		relatedGroups.addQuery('accounts', this.sysId);
		relatedGroups.addQuery('group.active', true);
		relatedGroups.query();
		while (relatedGroups.next())
			foundUsers = arrayUtil.union(foundUsers, this._groupMembers(relatedGroups.group));
		var length = foundUsers.length;
		foundUsers = foundUsers.length > 0 ? foundUsers.join() : 'Not Found';
		return foundUsers;
	},
	
	_groupMembers: function (group) {
		var userIDs = [];
		var groupMembers = new GlideRecord('sys_user_grmember');
		groupMembers.addQuery('group', group);
		groupMembers.addQuery('user.active', true);
		groupMembers.query();
		while (groupMembers.next())
			userIDs.push(groupMembers.getValue('user'));
		
		return userIDs;
	},
	
	// get user categories. If the user is found, return all categories on the accounts below it.
	getCategories: function(user, is_task, encode, userFound) {
		var allCategories = [];
		var accountCategories = [];
		var arrayUtil = new global.ArrayUtil();
		var json = new global.JSON();
		var catObj;
		is_task = typeof is_task != 'boolean' ? true : is_task;
		encode = typeof encode != 'boolean' ? true : encode;
		userFound = typeof userFound != 'boolean' ? false : userFound;
		if (!userFound) {
			var accountUsers = this._getAccountUsers();
			if(accountUsers.indexOf(user) != -1)
				userFound = true;
		}
		
		// Iterate through children
		var childAccounts = new GlideRecord('x_dehp_time_track_accounts');
		childAccounts.addQuery('parent', this.sysId);
		childAccounts.query();
		while(childAccounts.next()) {
			var account = new Account(childAccounts);
			allCategories = arrayUtil.union(allCategories, account.getCategories(user, is_task, encode, userFound));
		}
		
		if(userFound) {
			// Add our attached categories
			var categories = new GlideRecord('x_dehp_time_track_time_categories');
			categories.addQuery('account', this.sysId);
			categories.addQuery('active=true^is_task=' + is_task);
			categories.query();
			while(categories.next()) {
				catObj = {
					'name' : categories.name + '',
					'sys_id' : categories.sys_id + ''
				};
				// We need to encode as a JSON string. This will allow us to sort by name easier (using Array.sort()) later on,
				// and also allow us to pass this properly to the UI Page forEach jelly loop, where it is decoded for display.
				if(encode) {
					accountCategories.push(json.encode(catObj));
				} else {
					accountCategories.push(catObj);
				}
			}
		}
		return arrayUtil.union(allCategories, accountCategories);
	},
	
	_getCategories: function(account) {
		account = TimeUtils.verifyIsGlideRecord(account, 'x_dehp_time_track_accounts');
		var categoryRecords = new GlideRecord('x_dehp_time_track_time_categories');
		categoryRecords.addQuery('account', account.getValue('sys_id'));
		categoryRecords.query();
		categories = [];
		while(categoryRecords.next()) {
			categories.push(categoryRecords.getValue('sys_id'));
		}
		return categories;
	},
	
	getSubAccountsCategories: function(account) {
		if(typeof account === 'undefined')
			account = this.gr;
		account = TimeUtils.verifyIsGlideRecord(account, 'x_dehp_time_track_accounts');
		var categories = this._getCategories(account);
		var arrayUtil = new global.ArrayUtil();
		var subAccount = new GlideRecord('x_dehp_time_track_accounts');
		subAccount.addQuery('parent', account.getValue('sys_id'));
		subAccount.addQuery('active', true);
		subAccount.query();
		while(subAccount.next()) {
			var containsTasks = subAccount.type.contains_tasks;
			var type = typeof containsTasks;
			categories = arrayUtil.union(categories, this.getSubAccountsCategories(subAccount));
			if(containsTasks) {
				categories = arrayUtil.union(categories, this._getCategories(subAccount));
			}
		}
		return arrayUtil.union(categories);
	},
	
	type: 'Account'
};
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>_ejense</sys_created_by>
        <sys_created_on>2018-11-26 20:46:54</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>5399b2c1db462f00482906e2ca9619e2</sys_id>
        <sys_mod_count>52</sys_mod_count>
        <sys_name>Account</sys_name>
        <sys_package display_value="Time Tracking" source="x_dehp_time_track">fd7546c9db82eb00aa0f71043996190b</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Time Tracking">fd7546c9db82eb00aa0f71043996190b</sys_scope>
        <sys_update_name>sys_script_include_5399b2c1db462f00482906e2ca9619e2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-02-04 22:44:24</sys_updated_on>
    </sys_script_include>
</record_update>
